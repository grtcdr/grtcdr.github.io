#+TITLE: A short introduction to PlantUML
#+DATE: <2022-07-15>
#+SETUPFILE: ../setup.org
#+FILETAGS: :doc:

* Foreword
:PROPERTIES:
:CUSTOM_ID: foreword
:END:

#+begin_quote
Modeling is the designing of software applications before coding. -- uml.org
#+end_quote

Many developers believe this is a waste of time, and while I mostly
agree, I certainly see a lot of benefit in abstracting complex systems
through diagrams that even non-programmers can wrap their heads
around.

UML is a topic that is still taught in academia, but I don't think
it's taught right. In every academic project I was part of, I've
noticed people misusing UML, or at least, not using it to its full
potential.

Allow me to elaborate.

* Reproducibility
:PROPERTIES:
:CUSTOM_ID: reproducibility
:END:

When UML is a prerequisite, I choose to use a solution that can be
reproduced by people other than myself. A proprietary format is
likely to change over time, and heavy software is simply a no-go.

* Versioning
:PROPERTIES:
:CUSTOM_ID: versioning
:END:

Git and all other version control systems favor text.

I always /sigh/ when I see projects hosting things that are not
primarily software in a VCS. My first instinct is to yell at the
maintainer for choosing Git, because it's not what Git was designed
for.

[[https://github.com/plantuml/plantuml][PlantUML]] is human-readable, human-writable and is simply plain text -
this allows your VCS to do its compression magic, which in turn saves
you a non-negligible amount of time. Since it is merely a textual
representation, a language out of which spring visual diagrams, one
can track the changes that occur within the file overtime.

* Reliability
:PROPERTIES:
:CUSTOM_ID: reliability
:END:

PlantUML, being a text-driven solution, does not face the issues that
plague GUI-driven alternatives, all of which start to break down at
some point. Their UI is usually cluttered with all of the diagrams
they support... None of which you'll actually ever use in a real-world
scenario.

I just want to model this system so I can be done with it, dude.

* Integration
:PROPERTIES:
:CUSTOM_ID: integration
:END:

PlantUML automatically integrates with your workflow because you can
literally use it anywhere. You're not limited as to where you write
UML; this allows you to mold the tool into your workflow as you see
fit.

* Getting things done
:PROPERTIES:
:CUSTOM_ID: getting-things-done
:END:

My computing environment is revolved around the philosophy of a
keyboard-centric worfklow. I find that it saves me a lot of time and
energy not having to move my hands beyond the [[https://en.wikipedia.org/wiki/Touch_typing][home row]], and it's
gratifying to jump back and forth between my windows and workspaces at
the speed of light.

PlantUML, being text-driven, does not hamper my workflow, rather, it
extends it.

* Showcase
:PROPERTIES:
:CUSTOM_ID: showcase
:END:

Let's represent the animal kingdom in a class diagram, abstracting it
the objected oriented way.

Give this a good read, and then jump to the next section for my explanation.

#+begin_example
@startuml
package Animalia {

  Animal <|-- Feline
  Animal <|-- Canine

  Feline --> Felidae
  Canine --> Canidae

  abstract class Animal {
     {abstract} void jump(height: int)
     {abstract} void run(velocity: int)
  }
  
  class Feline {
     - species: Enum<Felidae>
     + jump(height: int)
     + run(velocity: int)
  }
  
  class Canine {
     - species: Enum<Canidae>
     + jump(height: int)
     + run(velocity: int)
  }

  enum Felidae {
     Jaguar,
     Lion,
     Cougar
  }
  
  enum Canidae {
     Wolf,
     Fox,
     Dog
  }
}
@enduml
#+end_example

Reading over the syntax, we can see that everything is wrapped inside
~@startuml~ and ~@enduml~, a notation that is required for PlantUML to
recognize its own syntax, kind of like a shebang.

Inside the ~Animalia~ package, we find two classes, ~Feline~ and
~Canine~ which implement the functions defined in ~Animal~, our
abstract class. We've also got two enums, ~Felidae~, and ~Canidae~,
which hold as many species of the two families as I can possibly think
of.

Okay, so how do we tie everything together? You guessed it, with
arrows!

We can represent aggregation between two classes with ~<|--~ or
~--|>~, and to represent a normal relationship between two things,
such as what you see between the different enums and classes, we can
use ~<--~ or ~-->~.

The direction of the pointy bit matters, and it will be reflected *as
is*, in the [[diagram][output diagram]].

The last thing I'll cover is access modifiers, all of which are
assigned a unique icon by PlantUML. Prepending a method or attribute
with a ~+~ will indicate that it's ~public~ -- ~-~ is private -- ~#~ is
protected and ~~~ is package private. It's sort of your responsibility
to use them appropriately, as PlantUML won't stop you from shooting
yourself in the foot.

Dying to compile it? Pop your terminal open, and give this command a
go.

#+begin_src sh :eval no
plantuml animalia.puml -tpng animalia.png
#+end_src

If all goes smoothly, you should see an ~animalia.png~ file appear in
your working directory... Go on, open it!

#+name: diagram
#+attr_html: :alt Animalia class diagram :style width:50%;
[[../images/posts/animalia.svg]]

I hope I've given PlantUML the proper introduction it deserves. We
have barely even touched the surface of what PlantUML can do, but
we're already capable of doing so much, and that's really cool!
