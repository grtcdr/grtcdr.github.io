#+title:    Linking articles to their version control system to effectively track changes
#+date:     <2022-10-08>
#+filetags: :emacs:

This website has been a super fun side-project, but there's a lot of
room for improvement. For example, even though its source code is
publicly available, it's not quite visible. I intend to finally fix
that, and this post is going to cover that experience in detail.

We're going to tackle /blog posts/, a category of articles where it's
pivotal to remain transparent by tracking and divulging any
alterations we might make to them over time.

As this website is [[https://en.wikipedia.org/wiki/Version_control][source-controlled]], the most passive and efficient
way to solve this transparency problem, is to utilize my version
control system, which in my case is [[https://git-scm.com/][git]]... the "stupid content
tracker".

There's no denying that git (or any other VCS) happens to be more
effective at tracking changes than you, or me. This blog post is a
proposition (as well as a guide) for writers to cease the manual
writing of changelogs, and simply let our version control systems take
care of this task for us.

I'm going to be building on top of [[https://git.sr.ht/~bzg/org-mode/tree/main/item/lisp/ox-html.el][ox-html]], an [[info:emacs#Org Mode][org-mode]] library,
because my website is built upon the tools provided by the [[info:emacs][Emacs]]
ecosystem. Before we dive into the technicalities, you should
familiarize yourself with the exportation and publishing processes
that a file submits to when instructed by the user.

#+name: diagram
#+begin_src dot :file ../../assets/images/2022-10-08--publish.svg :exports results
digraph G {
    graph   [ size = 3.0 ]
    node    [ pad = 0.4, shape = rect ]
    
    publish [ label = "Publishing project?" ];
    export  [ label = "Exporting file?" ];
    consult [ label = "Consult project specification" ];
    process [ label = "Pass Org document\nto ox-html\nfor transpilation" ];
    produce [ label = "Produce output HTML file" ];

    publish -> consult;
    consult -> process;
    export -> process;
    process -> produce;
    
    {
	rank=same;
	publish; export
    }
}
#+end_src

#+RESULTS: diagram
[[file:../../assets/images/2022-10-08--publish.svg]]

* First Implementation
:PROPERTIES:
:CUSTOM_ID: first-implementation
:END:

We'll need to implement a format string, which is recognized by
=ox-html= as a placeholder for /something/. We can take the =%a= and
=%e= format strings for example, which are translated/expanded
respectively into the author's name and email.

/But how do we define our own format strings?/

A tiny bit of research landed me on [[info:elisp#Custom Format Strings][format-spec]], which lets us
create them, however many we want!

/How does =ox-html= utilize this function?/

If we take a peak at its source code, we find a few references to
=format-spec= -- but the one that's most interesting to us is
=org-html-format-spec=, which as of Org Mode v9.5.5 looks like this:

#+begin_src emacs-lisp
(defun org-html-format-spec (info)
  "Return format specification for preamble and postamble.
INFO is a plist used as a communication channel."
  (let ((timestamp-format (plist-get info :html-metadata-timestamp-format)))
    `((?t . ,(org-export-data (plist-get info :title) info))
      (?s . ,(org-export-data (plist-get info :subtitle) info))
      (?d . ,(org-export-data (org-export-get-date info timestamp-format)
			      info))
      (?T . ,(format-time-string timestamp-format))
      (?a . ,(org-export-data (plist-get info :author) info))
      (?e . ,(mapconcat
	      (lambda (e) (format "<a href=\"mailto:%s\">%s</a>" e e))
	      (split-string (plist-get info :email)  ",+ *")
	      ", "))
      (?c . ,(plist-get info :creator))
      (?C . ,(let ((file (plist-get info :input-file)))
	       (format-time-string timestamp-format
				   (and file (file-attribute-modification-time
					      (file-attributes file))))))
      (?v . ,(or (plist-get info :html-validation-link) "")))))
#+end_src

Whatever format string we specify within this alist, is going to be
recognized by the library and handed over to
=org-html--build-pre/postamble= and later expanded to its associated
S-expression.

Before we do anything we might regret, it's important that we inspect
how GitHub, in my case, references source files. Let's dissect the
source URL of my first ever blog, "Building a website with Emacs".

Full form: ~https://github.com/grtcdr/grtcdr.tn/blob/main/posts/2022-05-18.org~.

- ~https://github.com~, we all know GitHub.
- ~grtcdr/grtcdr.tn~ is the repository's identifier.
- ~blob~ to denote source code or data in general.
- ~main~ refers to the ~main~ branch.
- ~posts~ is the directory that contains, well... my posts.
- ~2022-05-18.org~ is the filename we're after.

That's all that we need, if someone were to inspect the
changes that I made to any given post, they can just view the file's
*history*.

/Okay, let's start hacking!/

The objective is to redefine =org-html-format-spec=; [[file:~/projects/grtcdr.tn/lisp/orchestrate/orchestrate.el][orchestrate.el]] as
its name might suggest, will orchestrate and define the structure the
various components required to build the website; it does this by
providing the website specification at the time of document
transpilation.

The first step is to define of the source URL prefix.

#+begin_src emacs-lisp :results none :eval no
(defvar blog-post-source-url-prefix
  "https://github.com/grtcdr/grtcdr.tn/blob/main/posts")
#+end_src

The second is to create a function which will determine the current
buffer's base file name, i.e. just the file name of the active blog post
(to be exported).

#+begin_src emacs-lisp :results none :eval no
(defun blog-post-file-name ()
    (concat (file-name-base (buffer-file-name)) ".org"))
#+end_src

The last step is to combine these two into a single function that
returns the whole URL that anyone can visit.

#+name: blog-post-source-url
#+begin_src emacs-lisp :results none :eval no
(defun blog-post-source-url ()
  (format "%s/%s"
	  blog-post-source-url-prefix
	  (blog-post-file-name)))
#+end_src

Just to make sure we're on the right track, I'm going to take this
function for a test drive. Let's visit a random blog post inside of
Emacs, e.g. "Extending project.el with to-do functionality"
[2022-08-08.org]:

- Hit =M-:=, type =(blog-post-source-url)= and hit =Return=.

Neat, I get back =https://github.com/grtcdr/grtcdr.tn/blob/main/posts/2022-10-08.org=. Just what I'm after!

We'll need to embed this within some HTML, =format= to the rescue!

#+begin_src emacs-lisp :exports code
(format "<a href=%s>Source</a>" (blog-post-source-url)) ; <a href="https://github.com/grtcdr/grtcdr.tn/blob/main/posts/2022-10-08.org">Source</a>
#+end_src

Let's add that bit of code to our redefined =org-html-format-spec=,
we'll associate this function with our new =%S= format string:

#+begin_src emacs-lisp
(defun org-html-format-spec (info)
  "Return format specification for preamble and postamble.
INFO is a plist used as a communication channel."
  (let ((timestamp-format (plist-get info :html-metadata-timestamp-format)))
    `((?t . ,(org-export-data (plist-get info :title) info))
      (?s . ,(org-export-data (plist-get info :subtitle) info))
      (?S . ,(format "<a href=%s>Source</a>" (blog-post-source-url))) ; <--  right here!
      (?d . ,(org-export-data (org-export-get-date info timestamp-format)
			      info))
      (?T . ,(format-time-string timestamp-format))
      (?a . ,(org-export-data (plist-get info :author) info))
      (?e . ,(mapconcat
	      (lambda (e) (format "<a href=\"mailto:%s\">%s</a>" e e))
	      (split-string (plist-get info :email)  ",+ *")
	      ", "))
      (?c . ,(plist-get info :creator))
      (?C . ,(let ((file (plist-get info :input-file)))
	       (format-time-string timestamp-format
				   (and file (file-attribute-modification-time
					      (file-attributes file))))))
      (?v . ,(or (plist-get info :html-validation-link) "")))))
#+end_src

And let's add the format string to our HTML preamble snippet:

#+begin_src html
<ul class="navigation">
  <div>
    <li><a href="/index.html">Home</a></li>
    <li><a href="/contact.html">Contact</a></li>
    <li><a href="/data/resume.pdf">Résumé</a></li>
  </div>
</ul>

<p class="metadata">%d by %a. (%S)</p> <!-- lookie here! -->
#+end_src

*Hurray!* That works!... until it doesn't.

* Second Implementation
:PROPERTIES:
:CUSTOM_ID: second-implementation
:END:

Not only do I host a blog on this website, but also numerous
documentation files, within which is the content of my system's
configuration files (dotfiles), and it doesn't help that they're
hosted on an entirely different website, i.e. SourceHut.

We have to somehow address this situation. We need to make this
solution more modular, so that it can support these two different
[[https://en.wikipedia.org/wiki/Forge_(software)][forges]] and use cases.

So let's start by storing these forges in a property list.

#+begin_src emacs-lisp :eval no
(defvar forges
  '(:github "github.com" :sourcehut "git.sr.ht")
  "Property list mapping git forges to their respective domain.")
#+end_src

We'll write a function that will incrementally construct the prefix
URL of any - /yes, any/ - resource, once it matches it against one of
our predefined forges.

#+begin_src emacs-lisp :eval no
(defun build-forge-prefix-url (forge slug type)
  "Construct the standard URL of a given FORGE by specifying
the repository SLUG and the TYPE of information to access.

FORGE is a property from the ’forges’ variable.

SLUG is a string and the combination of your username and the
name of your repository, e.g. \"octopus/website\".

TYPE can take a value of ’log’ or ’tree’."
  (cond ((equal forge :github)
	 (format "https://%s/%s/%s/"
		 (plist-get forges :github)
		 slug
		 (cond ((eq type 'log) "commits/main")
		       ((eq type 'tree) "blob/main")
		       (t (error "Invalid type.")))))
	((equal forge :sourcehut)
	 (format "https://%s/%s/%s/"
		 (plist-get forges :sourcehut)
		 (concat "~" slug)
		 (cond ((eq type 'log) "log/main/item")
		       ((eq type 'tree) "tree/main/item")
		       (t (error "Invalid type.")))))))
#+end_src

Let's run a few examples to understand how it works.

1. Return the URL pointing to the history of changes of a resource
   hosted on GitHub.

   #+begin_src emacs-lisp :exports both :eval no
   (build-forge-prefix-url :github "grtcdr/grtcdr.tn" 'log)
   ;; https://github.com/grtcdr/grtcdr.tn/commits/main/ 
   #+end_src

2. Return the URL pointing to the source code of a resource hosted on
   SourceHut.

   #+begin_src emacs-lisp :eval no
   (build-forge-prefix-url :sourcehut "grtcdr/dotfiles" 'tree)
   ;; https://git.sr.ht/~grtcdr/dotfiles/tree/main/item/ 
   #+end_src

Wonderful, the function covers whatever forge we throw at it! Let's
move on.

Do you remember =blog-post-source-url=? Well, that'll break if the
resource lives within a [[https://www.git-scm.com/book/en/v2/Git-Tools-Submodules][submodule]]. So we'll need to make /that/ more
modular.

Alright, what can we do to obtain the [[https://developer.mozilla.org/en-US/docs/Glossary/Slug][slug]] of a resource, whilst
taking into account this new setting?... We can make use of [[info:emacs#Version Control][vc]], a
built-in library and interface dedicated entirely to version control
systems.

We can use =vc-root-dir=... but for some reason that won't work when
we publish the project from a proximity, i.e. [[https://github.com/grtcdr/grtcdr.tn#building][through a Makefile]];
however, we can do with =vc-find-root=. This function requires that we
specify the buffer filename, as well as a "witness" i.e. a pattern to
match against when performing the search (for the project root),
e.g. =.git=.

Here's what I came up with:

#+begin_src emacs-lisp :eval no
(defun get-resource-slug ()
  "Determines the path of a resource relative to the value
returned by ’build-forge-prefix-url'"
  (let* ((buffer (buffer-file-name))
	 (root (or (vc-find-root buffer (regexp-opt '(".git" ".hg")))
		   (project-root (project-current)))))
    (string-remove-prefix
     (expand-file-name root) buffer)))
#+end_src

We're done with the new implementation; we should interact with the
new functions the same way we did with the older ones. For example,
have a look at the format strings used in this website:

- This format string expands to a link to the source code of a blog
  post hosted on GitHub.

  #+begin_src emacs-lisp :eval no
  (?w . (format
       "<a href=%s>source</a>"
       (concat
	(build-forge-prefix-url :github "grtcdr/grtcdr.tn" 'tree)
	(get-resource-slug))))
  #+end_src


- This one expands to a link to the list of revisions of a blog post
  hosted on GitHub.

  #+begin_src emacs-lisp :eval no
  (?x . (format
	 "<a href=%s>history</a>"
	 (concat
	  (build-forge-prefix-url :github "grtcdr/grtcdr.tn" 'log)
	  (get-resource-slug))))
  #+end_src

- While this one expands to a link to the list of revisions of a
  documentation file hosted on SourceHut.

  #+begin_src emacs-lisp :eval no
  (?y . (format
	 "<a href=%s>source</a>"
	 (concat
	  (build-forge-prefix-url :sourcehut "grtcdr/dotfiles" 'tree)
	  (get-resource-slug))))
  #+end_src

- And this one expands to a link to the list of revisions of a
  documentation file hosted on SourceHut.

  #+begin_src emacs-lisp :eval no
  (?z . (format
	 "<a href=%s>history</a>"
	 (concat
	  (build-forge-prefix-url :sourcehut "grtcdr/dotfiles" 'log)
	  (get-resource-slug))))
  #+end_src

* Conclusion
:PROPERTIES:
:CUSTOM_ID: conclusion
:END:

We did it... We hacked together a set of functions and scratched the
itch for transparency. I didn't expect this task to be so trivial, and
can I be honest with you? I've been postponing working on this feature
for so long. I just didn't know where to look or where to begin.

But in the end, I learned a few things:
- Elisp is not as scary as it looks.
- Org Mode is well designed and documented, as is the rest of Emacs.
- I'm starting to profit off of my choosing =ox-publish= as a static
  site builder.
